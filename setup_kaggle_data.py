"""
Setup script to organize Kaggle NSL-KDD dataset files
This will help you find and organize your downloaded files
"""

import os
import pandas as pd
import shutil

def find_kaggle_files():
    """Find NSL-KDD files in common locations"""
    
    print("🔍 Searching for NSL-KDD files...")
    
    # Common locations where users might have the files
    search_locations = [
        ".",  # Current directory
        "data/",
        "NSL-KDD/",
        "archive/",  # Common Kaggle extract folder name
        "nslkdd/",
        os.path.expanduser("~/Downloads/"),  # User's Downloads folder
    ]
    
    # Possible file names from Kaggle
    file_patterns = [
        "KDDTrain+.txt",
        "KDDTest+.txt", 
        "KDDTrain+_20Percent.txt",
        "KDDTrain+.ARFF",
        "KDDTest+.ARFF",
        "train.txt",
        "test.txt"
    ]
    
    found_files = {}
    
    for location in search_locations:
        if os.path.exists(location):
            print(f"  Checking: {location}")
            for file_pattern in file_patterns:
                full_path = os.path.join(location, file_pattern)
                if os.path.exists(full_path):
                    found_files[file_pattern] = full_path
                    print(f"    ✅ Found: {full_path}")
    
    return found_files

def organize_files(found_files):
    """Organize files into the correct project structure"""
    
    # Create target directory
    target_dir = "data/NSL-KDD"
    os.makedirs(target_dir, exist_ok=True)
    
    print(f"\n📁 Organizing files into {target_dir}/")
    
    # File mapping for standardization
    file_mapping = {
        "KDDTrain+.txt": "KDDTrain+.txt",
        "KDDTest+.txt": "KDDTest+.txt",
        "KDDTrain+_20Percent.txt": "KDDTrain+_20Percent.txt",
        "train.txt": "KDDTrain+.txt",
        "test.txt": "KDDTest+.txt"
    }
    
    organized_files = {}
    
    for original_name, source_path in found_files.items():
        # Determine target name
        target_name = file_mapping.get(original_name, original_name)
        target_path = os.path.join(target_dir, target_name)
        
        # Copy file if not already in target location
        if source_path != target_path:
            print(f"  📋 Copying {source_path} -> {target_path}")
            shutil.copy2(source_path, target_path)
        else:
            print(f"  ✅ Already in place: {target_path}")
        
        organized_files[target_name] = target_path
    
    return organized_files

def test_file_loading(organized_files):
    """Test loading the organized files"""
    
    print(f"\n🧪 Testing file loading...")
    
    # Find training and testing files
    train_file = None
    test_file = None
    
    for filename, filepath in organized_files.items():
        if "train" in filename.lower() and "20percent" not in filename.lower():
            train_file = filepath
        elif "test" in filename.lower():
            test_file = filepath
    
    # If no full training file, use 20% version
    if not train_file:
        for filename, filepath in organized_files.items():
            if "20percent" in filename.lower():
                train_file = filepath
                break
    
    if not train_file or not test_file:
        print("  ❌ Could not find both training and testing files")
        return False
    
    print(f"  Training file: {train_file}")
    print(f"  Testing file: {test_file}")
    
    # Try to load a few lines to test format
    try:
        # Test loading first few lines
        train_sample = pd.read_csv(train_file, nrows=5, header=None)
        test_sample = pd.read_csv(test_file, nrows=5, header=None)
        
        print(f"  ✅ Training file loaded: {train_sample.shape}")
        print(f"  ✅ Testing file loaded: {test_sample.shape}")
        
        # Show sample
        print(f"\n  Sample training data (first row):")
        print(f"    {train_sample.iloc[0, :5].tolist()}... (showing first 5 columns)")
        
        return True
        
    except Exception as e:
        print(f"  ❌ Error loading files: {e}")
        return False

def create_config_file(organized_files):
    """Create a config file with correct file paths"""
    
    # Find the best training and testing files
    train_file = None
    test_file = None
    
    for filename, filepath in organized_files.items():
        if "train" in filename.lower():
            if "20percent" in filename.lower():
                train_file_20 = filepath
            else:
                train_file = filepath
        elif "test" in filename.lower():
            test_file = filepath
    
    # Prefer 20% for faster processing
    if 'train_file_20' in locals():
        train_file = train_file_20
    
    config_content = f'''# NSL-KDD Dataset Configuration
# Generated by setup_kaggle_data.py

TRAIN_FILE = "{train_file}"
TEST_FILE = "{test_file}"

# Available files:
'''
    
    for filename, filepath in organized_files.items():
        config_content += f'# {filename}: {filepath}\n'
    
    with open('nsl_kdd_config.py', 'w') as f:
        f.write(config_content)
    
    print(f"\n📄 Created configuration file: nsl_kdd_config.py")
    return train_file, test_file

def main():
    """Main setup function"""
    
    print("🚀 NSL-KDD Dataset Setup for XAI-Powered IDS")
    print("=" * 50)
    
    # Step 1: Find files
    found_files = find_kaggle_files()
    
    if not found_files:
        print("❌ No NSL-KDD files found!")
        print("\nPlease make sure you have extracted the Kaggle dataset files.")
        print("Expected files: KDDTrain+.txt, KDDTest+.txt")
        print("\nTry placing the files in one of these locations:")
        print("- Current directory")
        print("- data/ folder")
        print("- Create a NSL-KDD/ folder with the files")
        return
    
    print(f"\n✅ Found {len(found_files)} files!")
    
    # Step 2: Organize files
    organized_files = organize_files(found_files)
    
    # Step 3: Test loading
    loading_success = test_file_loading(organized_files)
    
    if not loading_success:
        print("\n❌ File loading test failed!")
        return
    
    # Step 4: Create config
    train_file, test_file = create_config_file(organized_files)
    
    # Final instructions
    print("\n" + "=" * 50)
    print("🎉 Setup Complete!")
    print("=" * 50)
    print(f"📁 Files organized in: data/NSL-KDD/")
    print(f"🚂 Training file: {train_file}")
    print(f"🧪 Testing file: {test_file}")
    print(f"⚙️  Configuration saved: nsl_kdd_config.py")
    
    print("\n📋 Next Steps:")
    print("1. Run: python test_data_loading.py")
    print("2. If successful, run: python ids_xai.py")
    
    print(f"\n💡 Your files are ready for XAI analysis!")

if __name__ == "__main__":
    main()